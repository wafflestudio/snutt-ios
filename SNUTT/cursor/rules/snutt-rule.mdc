---
alwaysApply: true
---

# SNUTT iOS Architecture Rules

This document outlines the architecture rules and patterns to follow when working on the SNUTT iOS project.

## Modular Architecture

SNUTT follows a strict modular architecture with three main module categories:

1. **Feature Modules**: Self-contained features with implementations
2. **Feature Interface Modules**: Public contracts for features
3. **Utility and Shared Modules**: Reusable components

### Module Dependency Rules

- Feature → FeatureInterface: Features can only depend on interfaces of other features
- FeatureInterface → FeatureInterface: Interfaces can depend on interfaces of other features (unless there's no circular dependency)
- Feature → Utility/Shared: Features can depend on utility/shared modules
- FeatureInterface → Utility/Shared: Interfaces can depend on utilities/shared modules
- Shared → Utility/Shared: Shared modules can depend on other shared modules (unless there's no circular dependency)
- Utility → Utility: Utilities can depend on other utilities (unless there's no circular dependency)

### CRITICAL: FeatureInterface modules CANNOT depend on Feature modules

The separation between interfaces and implementations is strictly enforced.

## Clean Architecture Layers

Each feature follows a Clean Architecture pattern with these layers:

1. **UI Layer**: SwiftUI views and components
2. **Presentation Layer**: ViewModels and presentation logic
3. **Business Logic Layer**: Use cases, domain models, repository protocols
4. **Infrastructure Layer**: Repositories and API clients

### Layer Dependency Rules

- UI → Presentation ONLY: UI components can only depend on ViewModels
- UI CANNOT directly access repositories or use cases
- Presentation → Business Logic: ViewModels use interfaces defined in the business layer
- Business Logic → Infrastructure: Use cases depend on repository interfaces

## Dependency Injection Pattern

SNUTT uses swift-dependencies package for dependency injection:

### Interface Definition (in FeatureInterface)

```swift
@Spyable
public protocol SomeRepository: Sendable {
    func someMethod() async throws -> ReturnType
}

public enum SomeRepositoryKey: TestDependencyKey {
    public static let testValue: any SomeRepository = {
        let spy = SomeRepositorySpy()
        spy.someMethodReturnValue = defaultValue
        return spy
    }()
}

extension DependencyValues {
    public var someRepository: any SomeRepository {
        get { self[SomeRepositoryKey.self] }
        set { self[SomeRepositoryKey.self] = newValue }
    }
}
```

### Live Implementation (in Feature's LiveDependencies.swift)

```swift
extension SomeRepositoryKey: DependencyKey {
    public static let liveValue: any SomeRepository = SomeAPIRepository()
}
```

## Modern Swift Practices

- Use Swift 6 features and syntax
- Target iOS 17.0+
- Use Swift Concurrency (`async/await`) for asynchronous operations
- Use the Observation framework for state management
- Make all repository protocols and implementations `Sendable`

## ViewModels and Observations

- Use the `@Observable` macro for ViewModels
- Use `@Bindable` in Views to bind to ObservableObject ViewModels
- ViewModels should inject dependencies using `@Dependency`
- View state should be managed through ObservationState

```swift
@Observable
@MainActor
public class FeatureViewModel {
    @Dependency(\.someRepository) private var someRepository
    
    // State and methods
}
```

## Repository Pattern

- Define repository interfaces in FeatureInterface modules
- Implement repositories in Feature modules
- Repositories should be protocol-based and use async/await
- Use `@Spyable` to generate test spies automatically

## Testing Strategy

- Interface modules define test dependencies via `TestDependencyKey`
- Use generated spies for mocking in tests
- Test ViewModels using TestDependencies

## Project Structure

Each feature should follow this structure:

```
Feature/
  ├─ Sources/
  │   ├─ UI/              # SwiftUI Views
  │   ├─ Presentation/    # ViewModels
  │   ├─ BusinessLogic/          # Use Cases, Business Logic
  │   ├─ Infra/  # Repository Implementations
  │   └─ Composition/     # Dependency Registration
  └─ Tests/
      └─ UnitTests/       # Tests for Presentation, BusinessLogic, Infra
```